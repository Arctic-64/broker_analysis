"0","test_that(""the prefix function works"", {"
"0","  expect_equal(number_ext3_prefix(""POLICY5"", ""POL""), ""POL005"")"
"0","  expect_equal(number_ext3_prefix(""POLICY50"", ""POL""), ""POL050"")"
"0","  expect_equal(number_ext3_prefix(""POLicy 5"", ""POL""), ""POL005"")"
"0","  expect_equal(number_ext3_prefix(""abc 50"", ""POL""), ""POL050"")"
"0","  expect_equal(number_ext3_prefix(""POLICY  5"", ""POL""), ""POL005"")"
"0","  expect_equal(number_ext3_prefix(""POLICY  50"", ""POL""), ""POL050"")"
"0","  expect_equal(number_ext3_prefix(""POLICY500"", ""POL""), ""POL500"")"
"0","  expect_equal(number_ext3_prefix(""POLICY 500"", ""POL""), ""POL500"")"
"0","  expect_equal(number_ext3_prefix(""5"", ""POL""), ""POL005"")"
"0","  expect_equal(number_ext3_prefix("""", ""POL""), ""POL000"")"
"0","  expect_equal(number_ext3_prefix(""500 policy"", ""POL""), ""POL500"")"
"0","})"
"1","[32mTest passed[39m ðŸ˜¸"
"1",""
"1","
"
"0","broker1 <- read.csv(here(""broker1.csv""))"
"0","broker2 <- read.csv(here(""broker2.csv""))"
"0",""
"0","test_that(""colnames are of propper length"", {"
"0","  expect_equal(ncol(broker1), length(variable_names_standardised))"
"0","  expect_equal(ncol(broker2), length(variable_names_standardised))"
"0","  expect_equal(ncol(broker2), ncol(broker1))"
"0","})"
"1","[32mTest passed[39m ðŸ¥³"
"1",""
"1","
"
"0","##given lack of functions, i can describe some ideas for robust code"
"0","## assert column name standardization is the same length as the source data set colnames"
"0","## assert source data sets have the same number of columns"
"0",""
